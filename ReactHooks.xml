<templateSet group="React hooks">
  <template name="usst" value="const [$VALUE$, set$CAPITALIZED_VALUE$] = useState($INIT_VALUE$); " description="useState" toReformat="false" toShortenFQNames="true">
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAPITALIZED_VALUE" expression="capitalize(VALUE)" defaultValue="" alwaysStopAt="false" />
    <variable name="INIT_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usef" value="useEffect(() =&gt; {&#10;   $BODY$&#10;}, [$DEPENDENCIES$]);" description="useEffect" toReformat="true" toShortenFQNames="true">
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCIES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usfetch" value="useEffect(() =&gt; {&#10;   fetch$DATA$($DEPENDENCIES$)&#10;}, [$DEPENDENCIES$]);" description="useEffect that fetch data" toReformat="false" toShortenFQNames="true">
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCIES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usm" value="const $VALUE$ = useMemo(() =&gt; {&#10;$CALC_VALUE$&#10;}, [$DEPENDENCIES$]); &#10;&#10;" description="useMemo" toReformat="false" toShortenFQNames="true">
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CALC_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCIES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usr" value="const $REF$ = useRef($INIT_VALUE$);" description="useRef" toReformat="false" toShortenFQNames="true">
    <variable name="REF" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usco" value="const {$VALUE$} = useContext($CONTEXT$);" description="useContext" toReformat="false" toShortenFQNames="true">
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CONTEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>
