<templateSet group="React hooks">
  <template name="usst" value="const [$VALUE$, set$CAPITALIZE_VALUE$] = useState$END$($INIT_VALUE$); " description="useState" toReformat="true" toShortenFQNames="true">
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAPITALIZE_VALUE" expression="capitalize(VALUE)" defaultValue="" alwaysStopAt="false" />
    <variable name="INIT_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usef" value="useEffect$END$(() =&gt; {&#10;   $BODY$&#10;}, [$DEPENDENCIES$]);" description="useEffect" toReformat="true" toShortenFQNames="true">
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCIES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usm" value="const $VALUE$ = useMemo$END$(() =&gt; {&#10;$CALC_VALUE$;&#10;}, [$DEPENDENCIES$]); &#10;&#10;" description="useMemo" toReformat="true" toShortenFQNames="true">
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CALC_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCIES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usref" value="const $REF$ = useRef$END$($INIT_VALUE$);" description="useRef" toReformat="true" toShortenFQNames="true">
    <variable name="REF" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="uscall" value="const $CALLBACK$ = useCallback$END$(($PARAMS$) =&gt; {&#10;    $DO_SOMETHING$&#10;}, [$DEPENDENCIES$]);" description="" toReformat="true" toShortenFQNames="true">
    <variable name="CALLBACK" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DO_SOMETHING" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCIES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usco" value="const $VALUE$ = useContext$END$($CONTEXT$);" description="useContext" toReformat="true" toShortenFQNames="true">
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CONTEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usred" value="const [$STATE$, dispatch] = useReducer$END$($REDUCER$, $INIT_VALUE$); " description="useReducer" toReformat="true" toShortenFQNames="true">
    <variable name="STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="REDUCER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="usdisp" value="const dispatch = useDispatch$END$();" description="useDispatch" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="usloc" value="const location = useLocation$END$();&#10;" description="useLocation" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ushist" value="const history = useHistory$END$();" description="useHistory" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ussel" value="const $DATA$ = useSelector$END$(select$METHOD_NAME$, $EQUALITY_FN$);" description="useSelector" toReformat="true" toShortenFQNames="true">
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="METHOD_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EQUALITY_FN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ussel-param" value="const $DATA$ = useSelector$END$(state =&gt;&#10;    select$METHOD_NAME$(state,  $PARAMS$),&#10;$EQUALITY_FN$&#10;);" description="useSelector with params" toReformat="true" toShortenFQNames="true">
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="METHOD_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EQUALITY_FN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>
